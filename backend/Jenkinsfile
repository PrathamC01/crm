pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'crm-api'
        DOCKER_TAG = "${BUILD_NUMBER}"
        PYTHON_VERSION = '3.11'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                sh '''
                    python${PYTHON_VERSION} -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install -r crm/requirements.txt
                '''
            }
        }
        
        stage('Lint') {
            steps {
                sh '''
                    . venv/bin/activate
                    pip install flake8 black isort
                    flake8 crm/app --max-line-length=88 --exclude=migrations
                    black --check crm/app
                    isort --check-only crm/app
                '''
            }
        }
        
        stage('Test') {
            steps {
                sh '''
                    . venv/bin/activate
                    pip install pytest pytest-asyncio pytest-cov httpx
                    pytest crm/app/tests/ -v --cov=crm/app --cov-report=xml
                '''
            }
            post {
                always {
                    publishCoverage adapters: [
                        coberturaAdapter('coverage.xml')
                    ], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                sh '''
                    . venv/bin/activate
                    pip install safety bandit
                    safety check --json --output safety-report.json || true
                    bandit -r crm/app -f json -o bandit-report.json || true
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh '''
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                '''
            }
        }
        
        stage('Test Docker Image') {
            steps {
                sh '''
                    # Test that the container starts and health check passes
                    docker run -d --name test-container -p 8001:8001 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    sleep 30
                    curl -f http://localhost:8001/health || exit 1
                    docker stop test-container
                    docker rm test-container
                '''
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                sh '''
                    # Deploy to staging environment
                    docker-compose -f docker-compose.staging.yml up -d
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
                sh '''
                    # Deploy to production environment
                    docker-compose -f docker-compose.prod.yml up -d
                '''
            }
        }
    }
    
    post {
        always {
            cleanWs()
            sh 'docker system prune -f'
        }
        success {
            slackSend(
                color: 'good',
                message: "✅ CRM API Build Successful - ${env.JOB_NAME} ${env.BUILD_NUMBER}"
            )
        }
        failure {
            slackSend(
                color: 'danger',
                message: "❌ CRM API Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER}"
            )
        }
    }
}